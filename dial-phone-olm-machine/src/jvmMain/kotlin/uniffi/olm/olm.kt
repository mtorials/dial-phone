// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.olm

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import de.mtorials.dialphone.olmmachine.bindings.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_olm_eb49_rustbuffer_alloc(size, status).also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_olm_eb49_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus()
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler : CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback)
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_olm"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "uniffi/olm")
                .also { lib: _UniFFILib ->
                    FfiConverterTypeLogger.register(lib)
                    FfiConverterTypeProgressListener.register(lib)
                }
        }
    }

    fun ffi_olm_eb49_OlmMachine_object_free(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_new(
        user_id: RustBuffer.ByValue,
        device_id: RustBuffer.ByValue,
        path: RustBuffer.ByValue,
        passphrase: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Pointer

    fun olm_eb49_OlmMachine_identity_keys(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_user_id(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_device_id(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_receive_sync_changes(
        ptr: Pointer,
        events: RustBuffer.ByValue,
        device_changes: RustBuffer.ByValue,
        key_counts: RustBuffer.ByValue,
        unused_fallback_keys: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_outgoing_requests(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_mark_request_as_sent(
        ptr: Pointer,
        request_id: RustBuffer.ByValue,
        request_type: RustBuffer.ByValue,
        response: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_decrypt_room_event(
        ptr: Pointer,
        event: RustBuffer.ByValue,
        room_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_encrypt(
        ptr: Pointer,
        room_id: RustBuffer.ByValue,
        event_type: RustBuffer.ByValue,
        content: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_identity(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_verify_identity(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_device(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        device_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_mark_device_as_trusted(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        device_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_verify_device(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        device_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_user_devices(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_is_user_tracked(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Byte

    fun olm_eb49_OlmMachine_update_tracked_users(
        ptr: Pointer,
        users: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_get_missing_sessions(
        ptr: Pointer,
        users: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_share_room_key(
        ptr: Pointer,
        room_id: RustBuffer.ByValue,
        users: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_receive_unencrypted_verification_event(
        ptr: Pointer,
        event: RustBuffer.ByValue,
        room_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_get_verification_requests(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_verification_request(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_verification(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_request_verification(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        room_id: RustBuffer.ByValue,
        event_id: RustBuffer.ByValue,
        methods: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_verification_request_content(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        methods: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_request_self_verification(
        ptr: Pointer,
        methods: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_request_verification_with_device(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        device_id: RustBuffer.ByValue,
        methods: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_accept_verification_request(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        methods: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_confirm_verification(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_cancel_verification(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        cancel_code: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_start_sas_with_device(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        device_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_start_sas_verification(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_accept_sas_verification(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_emoji_index(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_decimals(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_start_qr_verification(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_scan_qr_code(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        data: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_generate_qr_code(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        flow_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_request_room_key(
        ptr: Pointer,
        event: RustBuffer.ByValue,
        room_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_export_keys(
        ptr: Pointer,
        passphrase: RustBuffer.ByValue,
        rounds: Int,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_import_keys(
        ptr: Pointer,
        keys: RustBuffer.ByValue,
        passphrase: RustBuffer.ByValue,
        progress_listener: Long,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_import_decrypted_keys(
        ptr: Pointer,
        keys: RustBuffer.ByValue,
        progress_listener: Long,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_discard_room_key(
        ptr: Pointer,
        room_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_cross_signing_status(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_bootstrap_cross_signing(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_export_cross_signing_keys(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_import_cross_signing_keys(
        ptr: Pointer,
        export: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_is_identity_verified(
        ptr: Pointer,
        user_id: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Byte

    fun olm_eb49_OlmMachine_sign(
        ptr: Pointer,
        message: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_enable_backup_v1(
        ptr: Pointer,
        key: RustBuffer.ByValue,
        version: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_disable_backup(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_backup_room_keys(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_save_recovery_key(
        ptr: Pointer,
        key: RustBuffer.ByValue,
        version: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_OlmMachine_room_key_counts(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_get_backup_keys(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_OlmMachine_backup_enabled(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): Byte

    fun olm_eb49_OlmMachine_verify_backup(
        ptr: Pointer,
        auth_data: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Byte

    fun ffi_olm_eb49_BackupRecoveryKey_object_free(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_BackupRecoveryKey_new(
        _uniffi_out_err: RustCallStatus
    ): Pointer

    fun olm_eb49_BackupRecoveryKey_from_passphrase(
        passphrase: RustBuffer.ByValue,
        salt: RustBuffer.ByValue,
        rounds: Int,
        _uniffi_out_err: RustCallStatus
    ): Pointer

    fun olm_eb49_BackupRecoveryKey_new_from_passphrase(
        passphrase: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Pointer

    fun olm_eb49_BackupRecoveryKey_from_base64(
        key: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Pointer

    fun olm_eb49_BackupRecoveryKey_from_base58(
        key: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Pointer

    fun olm_eb49_BackupRecoveryKey_to_base58(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_BackupRecoveryKey_to_base64(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_BackupRecoveryKey_megolm_v1_public_key(
        ptr: Pointer,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun olm_eb49_BackupRecoveryKey_decrypt_v1(
        ptr: Pointer,
        ephemeral_key: RustBuffer.ByValue,
        mac: RustBuffer.ByValue,
        ciphertext: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_olm_eb49_Logger_init_callback(
        callback_stub: ForeignCallback,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_olm_eb49_ProgressListener_init_callback(
        callback_stub: ForeignCallback,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_set_logger(
        logger: Long,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun olm_eb49_migrate(
        data: RustBuffer.ByValue,
        path: RustBuffer.ByValue,
        passphrase: RustBuffer.ByValue,
        progress_listener: Long,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_olm_eb49_rustbuffer_alloc(
        size: Int,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_olm_eb49_rustbuffer_from_bytes(
        bytes: ForeignBytes.ByValue,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_olm_eb49_rustbuffer_free(
        buf: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_olm_eb49_rustbuffer_reserve(
        buf: RustBuffer.ByValue,
        additional: Int,
        _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
}

// Public interface members begin here.

public object FfiConverterInt : FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterLong : FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
) : Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    protected open fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement aways matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface BackupRecoveryKeyInterface {

    fun toBase58(): String

    fun toBase64(): String

    fun megolmV1PublicKey(): MegolmV1BackupKey

    @Throws(PkDecryptionException::class)
    fun decryptV1(ephemeralKey: String, mac: String, ciphertext: String): String
}

class BackupRecoveryKey(
    pointer: Pointer
) : FFIObject(pointer), BackupRecoveryKeyInterface {
    constructor() :
        this(
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_new(_status)
            }
        )

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    protected override fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_olm_eb49_BackupRecoveryKey_object_free(this.pointer, status)
        }
    }

    override fun toBase58(): String =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_to_base58(it, _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }
    override fun toBase64(): String =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_to_base64(it, _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }
    override fun megolmV1PublicKey(): MegolmV1BackupKey =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_megolm_v1_public_key(it, _status)
            }
        }.let {
            FfiConverterTypeMegolmV1BackupKey.lift(it)
        }

    @Throws(PkDecryptionException::class)override fun decryptV1(ephemeralKey: String, mac: String, ciphertext: String): String =
        callWithPointer {
            rustCallWithError(PkDecryptionException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_decrypt_v1(it, FfiConverterString.lower(ephemeralKey), FfiConverterString.lower(mac), FfiConverterString.lower(ciphertext), _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }

    companion object {
        fun fromPassphrase(passphrase: String, salt: String, rounds: Int): BackupRecoveryKey =
            BackupRecoveryKey(
                rustCall() { _status ->
                    _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_from_passphrase(FfiConverterString.lower(passphrase), FfiConverterString.lower(salt), FfiConverterInt.lower(rounds), _status)
                }
            )
        fun newFromPassphrase(passphrase: String): BackupRecoveryKey =
            BackupRecoveryKey(
                rustCall() { _status ->
                    _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_new_from_passphrase(FfiConverterString.lower(passphrase), _status)
                }
            )
        fun fromBase64(key: String): BackupRecoveryKey =
            BackupRecoveryKey(
                rustCallWithError(DecodeException) { _status ->
                    _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_from_base64(FfiConverterString.lower(key), _status)
                }
            )
        fun fromBase58(key: String): BackupRecoveryKey =
            BackupRecoveryKey(
                rustCallWithError(DecodeException) { _status ->
                    _UniFFILib.INSTANCE.olm_eb49_BackupRecoveryKey_from_base58(FfiConverterString.lower(key), _status)
                }
            )
    }
}

public object FfiConverterTypeBackupRecoveryKey : FfiConverter<BackupRecoveryKey, Pointer> {
    override fun lower(value: BackupRecoveryKey): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BackupRecoveryKey {
        return BackupRecoveryKey(value)
    }

    override fun read(buf: ByteBuffer): BackupRecoveryKey {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BackupRecoveryKey) = 8

    override fun write(value: BackupRecoveryKey, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


class OlmMachine(
    pointer: Pointer
) : FFIObject(pointer), OlmMachineInterface {
    constructor(userId: String, deviceId: String, path: String, passphrase: String?) :
        this(
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_new(FfiConverterString.lower(userId), FfiConverterString.lower(deviceId), FfiConverterString.lower(path), FfiConverterOptionalString.lower(passphrase), _status)
            }
        )

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    protected override fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_olm_eb49_OlmMachine_object_free(this.pointer, status)
        }
    }

    override fun identityKeys(): Map<String, String> =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_identity_keys(it, _status)
            }
        }.let {
            FfiConverterMapStringString.lift(it)
        }
    override fun userId(): String =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_user_id(it, _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }
    override fun deviceId(): String =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_device_id(it, _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun receiveSyncChanges(events: String, deviceChanges: DeviceLists, keyCounts: Map<String, Int>, unusedFallbackKeys: List<String>?): String =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_receive_sync_changes(it, FfiConverterString.lower(events), FfiConverterTypeDeviceLists.lower(deviceChanges), FfiConverterMapStringInt.lower(keyCounts), FfiConverterOptionalSequenceString.lower(unusedFallbackKeys), _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun outgoingRequests(): List<Request> =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_outgoing_requests(it, _status)
            }
        }.let {
            FfiConverterSequenceTypeRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun markRequestAsSent(requestId: String, requestType: RequestType, response: String) =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_mark_request_as_sent(it, FfiConverterString.lower(requestId), FfiConverterTypeRequestType.lower(requestType), FfiConverterString.lower(response), _status)
            }
        }

    @Throws(DecryptionException::class)override fun decryptRoomEvent(event: String, roomId: String): DecryptedEvent =
        callWithPointer {
            rustCallWithError(DecryptionException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_decrypt_room_event(it, FfiConverterString.lower(event), FfiConverterString.lower(roomId), _status)
            }
        }.let {
            FfiConverterTypeDecryptedEvent.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun encrypt(roomId: String, eventType: String, content: String): String =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_encrypt(it, FfiConverterString.lower(roomId), FfiConverterString.lower(eventType), FfiConverterString.lower(content), _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun getIdentity(userId: String): UserIdentity? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_identity(it, FfiConverterString.lower(userId), _status)
            }
        }.let {
            FfiConverterOptionalTypeUserIdentity.lift(it)
        }

    @Throws(SignatureException::class)override fun verifyIdentity(userId: String): SignatureUploadRequest =
        callWithPointer {
            rustCallWithError(SignatureException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_verify_identity(it, FfiConverterString.lower(userId), _status)
            }
        }.let {
            FfiConverterTypeSignatureUploadRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun getDevice(userId: String, deviceId: String): Device? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_device(it, FfiConverterString.lower(userId), FfiConverterString.lower(deviceId), _status)
            }
        }.let {
            FfiConverterOptionalTypeDevice.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun markDeviceAsTrusted(userId: String, deviceId: String) =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_mark_device_as_trusted(it, FfiConverterString.lower(userId), FfiConverterString.lower(deviceId), _status)
            }
        }

    @Throws(SignatureException::class)override fun verifyDevice(userId: String, deviceId: String): SignatureUploadRequest =
        callWithPointer {
            rustCallWithError(SignatureException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_verify_device(it, FfiConverterString.lower(userId), FfiConverterString.lower(deviceId), _status)
            }
        }.let {
            FfiConverterTypeSignatureUploadRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun getUserDevices(userId: String): List<Device> =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_user_devices(it, FfiConverterString.lower(userId), _status)
            }
        }.let {
            FfiConverterSequenceTypeDevice.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun isUserTracked(userId: String): Boolean =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_is_user_tracked(it, FfiConverterString.lower(userId), _status)
            }
        }.let {
            FfiConverterBoolean.lift(it)
        }
    override fun updateTrackedUsers(users: List<String>) =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_update_tracked_users(it, FfiConverterSequenceString.lower(users), _status)
            }
        }

    @Throws(CryptoStoreException::class)override fun getMissingSessions(users: List<String>): Request? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_missing_sessions(it, FfiConverterSequenceString.lower(users), _status)
            }
        }.let {
            FfiConverterOptionalTypeRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun shareRoomKey(roomId: String, users: List<String>): List<Request> =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_share_room_key(it, FfiConverterString.lower(roomId), FfiConverterSequenceString.lower(users), _status)
            }
        }.let {
            FfiConverterSequenceTypeRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun receiveUnencryptedVerificationEvent(event: String, roomId: String) =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_receive_unencrypted_verification_event(it, FfiConverterString.lower(event), FfiConverterString.lower(roomId), _status)
            }
        }

    override fun getVerificationRequests(userId: String): List<VerificationRequest> =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_verification_requests(it, FfiConverterString.lower(userId), _status)
            }
        }.let {
            FfiConverterSequenceTypeVerificationRequest.lift(it)
        }
    override fun getVerificationRequest(userId: String, flowId: String): VerificationRequest? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_verification_request(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalTypeVerificationRequest.lift(it)
        }
    override fun getVerification(userId: String, flowId: String): Verification? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_verification(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalTypeVerification.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun requestVerification(userId: String, roomId: String, eventId: String, methods: List<String>): VerificationRequest? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_request_verification(it, FfiConverterString.lower(userId), FfiConverterString.lower(roomId), FfiConverterString.lower(eventId), FfiConverterSequenceString.lower(methods), _status)
            }
        }.let {
            FfiConverterOptionalTypeVerificationRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun verificationRequestContent(userId: String, methods: List<String>): String? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_verification_request_content(it, FfiConverterString.lower(userId), FfiConverterSequenceString.lower(methods), _status)
            }
        }.let {
            FfiConverterOptionalString.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun requestSelfVerification(methods: List<String>): RequestVerificationResult? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_request_self_verification(it, FfiConverterSequenceString.lower(methods), _status)
            }
        }.let {
            FfiConverterOptionalTypeRequestVerificationResult.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun requestVerificationWithDevice(userId: String, deviceId: String, methods: List<String>): RequestVerificationResult? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_request_verification_with_device(it, FfiConverterString.lower(userId), FfiConverterString.lower(deviceId), FfiConverterSequenceString.lower(methods), _status)
            }
        }.let {
            FfiConverterOptionalTypeRequestVerificationResult.lift(it)
        }
    override fun acceptVerificationRequest(userId: String, flowId: String, methods: List<String>): OutgoingVerificationRequest? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_accept_verification_request(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), FfiConverterSequenceString.lower(methods), _status)
            }
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun confirmVerification(userId: String, flowId: String): ConfirmVerificationResult? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_confirm_verification(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalTypeConfirmVerificationResult.lift(it)
        }
    override fun cancelVerification(userId: String, flowId: String, cancelCode: String): OutgoingVerificationRequest? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_cancel_verification(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), FfiConverterString.lower(cancelCode), _status)
            }
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun startSasWithDevice(userId: String, deviceId: String): StartSasResult? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_start_sas_with_device(it, FfiConverterString.lower(userId), FfiConverterString.lower(deviceId), _status)
            }
        }.let {
            FfiConverterOptionalTypeStartSasResult.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun startSasVerification(userId: String, flowId: String): StartSasResult? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_start_sas_verification(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalTypeStartSasResult.lift(it)
        }
    override fun acceptSasVerification(userId: String, flowId: String): OutgoingVerificationRequest? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_accept_sas_verification(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }
    override fun getEmojiIndex(userId: String, flowId: String): List<Int>? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_emoji_index(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalSequenceInt.lift(it)
        }
    override fun getDecimals(userId: String, flowId: String): List<Int>? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_decimals(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalSequenceInt.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun startQrVerification(userId: String, flowId: String): QrCode? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_start_qr_verification(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalTypeQrCode.lift(it)
        }
    override fun scanQrCode(userId: String, flowId: String, data: String): ScanResult? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_scan_qr_code(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), FfiConverterString.lower(data), _status)
            }
        }.let {
            FfiConverterOptionalTypeScanResult.lift(it)
        }
    override fun generateQrCode(userId: String, flowId: String): String? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_generate_qr_code(it, FfiConverterString.lower(userId), FfiConverterString.lower(flowId), _status)
            }
        }.let {
            FfiConverterOptionalString.lift(it)
        }

    @Throws(DecryptionException::class)override fun requestRoomKey(event: String, roomId: String): KeyRequestPair =
        callWithPointer {
            rustCallWithError(DecryptionException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_request_room_key(it, FfiConverterString.lower(event), FfiConverterString.lower(roomId), _status)
            }
        }.let {
            FfiConverterTypeKeyRequestPair.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun exportKeys(passphrase: String, rounds: Int): String =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_export_keys(it, FfiConverterString.lower(passphrase), FfiConverterInt.lower(rounds), _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }

    @Throws(KeyImportException::class)override fun importKeys(keys: String, passphrase: String, progressListener: ProgressListener): KeysImportResult =
        callWithPointer {
            rustCallWithError(KeyImportException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_import_keys(it, FfiConverterString.lower(keys), FfiConverterString.lower(passphrase), FfiConverterTypeProgressListener.lower(progressListener), _status)
            }
        }.let {
            FfiConverterTypeKeysImportResult.lift(it)
        }

    @Throws(KeyImportException::class)override fun importDecryptedKeys(keys: String, progressListener: ProgressListener): KeysImportResult =
        callWithPointer {
            rustCallWithError(KeyImportException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_import_decrypted_keys(it, FfiConverterString.lower(keys), FfiConverterTypeProgressListener.lower(progressListener), _status)
            }
        }.let {
            FfiConverterTypeKeysImportResult.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun discardRoomKey(roomId: String) =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_discard_room_key(it, FfiConverterString.lower(roomId), _status)
            }
        }

    override fun crossSigningStatus(): CrossSigningStatus =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_cross_signing_status(it, _status)
            }
        }.let {
            FfiConverterTypeCrossSigningStatus.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun bootstrapCrossSigning(): BootstrapCrossSigningResult =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_bootstrap_cross_signing(it, _status)
            }
        }.let {
            FfiConverterTypeBootstrapCrossSigningResult.lift(it)
        }
    override fun exportCrossSigningKeys(): CrossSigningKeyExport? =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_export_cross_signing_keys(it, _status)
            }
        }.let {
            FfiConverterOptionalTypeCrossSigningKeyExport.lift(it)
        }

    @Throws(SecretImportException::class)override fun importCrossSigningKeys(export: CrossSigningKeyExport) =
        callWithPointer {
            rustCallWithError(SecretImportException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_import_cross_signing_keys(it, FfiConverterTypeCrossSigningKeyExport.lower(export), _status)
            }
        }

    @Throws(CryptoStoreException::class)override fun isIdentityVerified(userId: String): Boolean =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_is_identity_verified(it, FfiConverterString.lower(userId), _status)
            }
        }.let {
            FfiConverterBoolean.lift(it)
        }
    override fun sign(message: String): Map<String, Map<String, String>> =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_sign(it, FfiConverterString.lower(message), _status)
            }
        }.let {
            FfiConverterMapStringMapStringString.lift(it)
        }

    @Throws(DecodeException::class)override fun enableBackupV1(key: MegolmV1BackupKey, version: String) =
        callWithPointer {
            rustCallWithError(DecodeException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_enable_backup_v1(it, FfiConverterTypeMegolmV1BackupKey.lower(key), FfiConverterString.lower(version), _status)
            }
        }

    @Throws(CryptoStoreException::class)override fun disableBackup() =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_disable_backup(it, _status)
            }
        }

    @Throws(CryptoStoreException::class)override fun backupRoomKeys(): Request? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_backup_room_keys(it, _status)
            }
        }.let {
            FfiConverterOptionalTypeRequest.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun saveRecoveryKey(key: String?, version: String?) =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_save_recovery_key(it, FfiConverterOptionalString.lower(key), FfiConverterOptionalString.lower(version), _status)
            }
        }

    @Throws(CryptoStoreException::class)override fun roomKeyCounts(): RoomKeyCounts =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_room_key_counts(it, _status)
            }
        }.let {
            FfiConverterTypeRoomKeyCounts.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun getBackupKeys(): BackupKeys? =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_get_backup_keys(it, _status)
            }
        }.let {
            FfiConverterOptionalTypeBackupKeys.lift(it)
        }
    override fun backupEnabled(): Boolean =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_backup_enabled(it, _status)
            }
        }.let {
            FfiConverterBoolean.lift(it)
        }

    @Throws(CryptoStoreException::class)override fun verifyBackup(authData: String): Boolean =
        callWithPointer {
            rustCallWithError(CryptoStoreException) { _status ->
                _UniFFILib.INSTANCE.olm_eb49_OlmMachine_verify_backup(it, FfiConverterString.lower(authData), _status)
            }
        }.let {
            FfiConverterBoolean.lift(it)
        }
}

public object FfiConverterTypeOlmMachine : FfiConverter<OlmMachine, Pointer> {
    override fun lower(value: OlmMachine): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): OlmMachine {
        return OlmMachine(value)
    }

    override fun read(buf: ByteBuffer): OlmMachine {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: OlmMachine) = 8

    override fun write(value: OlmMachine, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


public object FfiConverterTypeBackupKeys : FfiConverterRustBuffer<BackupKeys> {
    override fun read(buf: ByteBuffer): BackupKeys {
        return BackupKeys(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: BackupKeys) = (
        FfiConverterString.allocationSize(value.recoveryKey) +
            FfiConverterString.allocationSize(value.backupVersion)
        )

    override fun write(value: BackupKeys, buf: ByteBuffer) {
        FfiConverterString.write(value.recoveryKey, buf)
        FfiConverterString.write(value.backupVersion, buf)
    }
}

public object FfiConverterTypeBootstrapCrossSigningResult : FfiConverterRustBuffer<BootstrapCrossSigningResult> {
    override fun read(buf: ByteBuffer): BootstrapCrossSigningResult {
        return BootstrapCrossSigningResult(
            FfiConverterTypeUploadSigningKeysRequest.read(buf),
            FfiConverterTypeSignatureUploadRequest.read(buf),
        )
    }

    override fun allocationSize(value: BootstrapCrossSigningResult) = (
        FfiConverterTypeUploadSigningKeysRequest.allocationSize(value.uploadSigningKeysRequest) +
            FfiConverterTypeSignatureUploadRequest.allocationSize(value.signatureRequest)
        )

    override fun write(value: BootstrapCrossSigningResult, buf: ByteBuffer) {
        FfiConverterTypeUploadSigningKeysRequest.write(value.uploadSigningKeysRequest, buf)
        FfiConverterTypeSignatureUploadRequest.write(value.signatureRequest, buf)
    }
}

public object FfiConverterTypeCancelInfo : FfiConverterRustBuffer<CancelInfo> {
    override fun read(buf: ByteBuffer): CancelInfo {
        return CancelInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CancelInfo) = (
        FfiConverterString.allocationSize(value.cancelCode) +
            FfiConverterString.allocationSize(value.reason) +
            FfiConverterBoolean.allocationSize(value.cancelledByUs)
        )

    override fun write(value: CancelInfo, buf: ByteBuffer) {
        FfiConverterString.write(value.cancelCode, buf)
        FfiConverterString.write(value.reason, buf)
        FfiConverterBoolean.write(value.cancelledByUs, buf)
    }
}

public object FfiConverterTypeConfirmVerificationResult : FfiConverterRustBuffer<ConfirmVerificationResult> {
    override fun read(buf: ByteBuffer): ConfirmVerificationResult {
        return ConfirmVerificationResult(
            FfiConverterSequenceTypeOutgoingVerificationRequest.read(buf),
            FfiConverterOptionalTypeSignatureUploadRequest.read(buf),
        )
    }

    override fun allocationSize(value: ConfirmVerificationResult) = (
        FfiConverterSequenceTypeOutgoingVerificationRequest.allocationSize(value.requests) +
            FfiConverterOptionalTypeSignatureUploadRequest.allocationSize(value.signatureRequest)
        )

    override fun write(value: ConfirmVerificationResult, buf: ByteBuffer) {
        FfiConverterSequenceTypeOutgoingVerificationRequest.write(value.requests, buf)
        FfiConverterOptionalTypeSignatureUploadRequest.write(value.signatureRequest, buf)
    }
}

public object FfiConverterTypeCrossSigningKeyExport : FfiConverterRustBuffer<CrossSigningKeyExport> {
    override fun read(buf: ByteBuffer): CrossSigningKeyExport {
        return CrossSigningKeyExport(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: CrossSigningKeyExport) = (
        FfiConverterOptionalString.allocationSize(value.masterKey) +
            FfiConverterOptionalString.allocationSize(value.selfSigningKey) +
            FfiConverterOptionalString.allocationSize(value.userSigningKey)
        )

    override fun write(value: CrossSigningKeyExport, buf: ByteBuffer) {
        FfiConverterOptionalString.write(value.masterKey, buf)
        FfiConverterOptionalString.write(value.selfSigningKey, buf)
        FfiConverterOptionalString.write(value.userSigningKey, buf)
    }
}

public object FfiConverterTypeCrossSigningStatus : FfiConverterRustBuffer<CrossSigningStatus> {
    override fun read(buf: ByteBuffer): CrossSigningStatus {
        return CrossSigningStatus(
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CrossSigningStatus) = (
        FfiConverterBoolean.allocationSize(value.hasMaster) +
            FfiConverterBoolean.allocationSize(value.hasSelfSigning) +
            FfiConverterBoolean.allocationSize(value.hasUserSigning)
        )

    override fun write(value: CrossSigningStatus, buf: ByteBuffer) {
        FfiConverterBoolean.write(value.hasMaster, buf)
        FfiConverterBoolean.write(value.hasSelfSigning, buf)
        FfiConverterBoolean.write(value.hasUserSigning, buf)
    }
}

public object FfiConverterTypeDecryptedEvent : FfiConverterRustBuffer<DecryptedEvent> {
    override fun read(buf: ByteBuffer): DecryptedEvent {
        return DecryptedEvent(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: DecryptedEvent) = (
        FfiConverterString.allocationSize(value.clearEvent) +
            FfiConverterString.allocationSize(value.senderCurve25519Key) +
            FfiConverterOptionalString.allocationSize(value.claimedEd25519Key) +
            FfiConverterSequenceString.allocationSize(value.forwardingCurve25519Chain)
        )

    override fun write(value: DecryptedEvent, buf: ByteBuffer) {
        FfiConverterString.write(value.clearEvent, buf)
        FfiConverterString.write(value.senderCurve25519Key, buf)
        FfiConverterOptionalString.write(value.claimedEd25519Key, buf)
        FfiConverterSequenceString.write(value.forwardingCurve25519Chain, buf)
    }
}

public object FfiConverterTypeDevice : FfiConverterRustBuffer<Device> {
    override fun read(buf: ByteBuffer): Device {
        return Device(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterMapStringString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Device) = (
        FfiConverterString.allocationSize(value.userId) +
            FfiConverterString.allocationSize(value.deviceId) +
            FfiConverterMapStringString.allocationSize(value.keys) +
            FfiConverterSequenceString.allocationSize(value.algorithms) +
            FfiConverterOptionalString.allocationSize(value.displayName) +
            FfiConverterBoolean.allocationSize(value.isBlocked) +
            FfiConverterBoolean.allocationSize(value.locallyTrusted) +
            FfiConverterBoolean.allocationSize(value.crossSigningTrusted)
        )

    override fun write(value: Device, buf: ByteBuffer) {
        FfiConverterString.write(value.userId, buf)
        FfiConverterString.write(value.deviceId, buf)
        FfiConverterMapStringString.write(value.keys, buf)
        FfiConverterSequenceString.write(value.algorithms, buf)
        FfiConverterOptionalString.write(value.displayName, buf)
        FfiConverterBoolean.write(value.isBlocked, buf)
        FfiConverterBoolean.write(value.locallyTrusted, buf)
        FfiConverterBoolean.write(value.crossSigningTrusted, buf)
    }
}


public object FfiConverterTypeDeviceLists : FfiConverterRustBuffer<DeviceLists> {
    override fun read(buf: ByteBuffer): DeviceLists {
        return DeviceLists(
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: DeviceLists) = (
        FfiConverterSequenceString.allocationSize(value.changed) +
            FfiConverterSequenceString.allocationSize(value.left)
        )

    override fun write(value: DeviceLists, buf: ByteBuffer) {
        FfiConverterSequenceString.write(value.changed, buf)
        FfiConverterSequenceString.write(value.left, buf)
    }
}

public object FfiConverterTypeKeyRequestPair : FfiConverterRustBuffer<KeyRequestPair> {
    override fun read(buf: ByteBuffer): KeyRequestPair {
        return KeyRequestPair(
            FfiConverterOptionalTypeRequest.read(buf),
            FfiConverterTypeRequest.read(buf),
        )
    }

    override fun allocationSize(value: KeyRequestPair) = (
        FfiConverterOptionalTypeRequest.allocationSize(value.cancellation) +
            FfiConverterTypeRequest.allocationSize(value.keyRequest)
        )

    override fun write(value: KeyRequestPair, buf: ByteBuffer) {
        FfiConverterOptionalTypeRequest.write(value.cancellation, buf)
        FfiConverterTypeRequest.write(value.keyRequest, buf)
    }
}

public object FfiConverterTypeKeysImportResult : FfiConverterRustBuffer<KeysImportResult> {
    override fun read(buf: ByteBuffer): KeysImportResult {
        return KeysImportResult(
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterMapStringMapStringListString.read(buf),
        )
    }

    override fun allocationSize(value: KeysImportResult) = (
        FfiConverterLong.allocationSize(value.imported) +
            FfiConverterLong.allocationSize(value.total) +
            FfiConverterMapStringMapStringListString.allocationSize(value.keys)
        )

    override fun write(value: KeysImportResult, buf: ByteBuffer) {
        FfiConverterLong.write(value.imported, buf)
        FfiConverterLong.write(value.total, buf)
        FfiConverterMapStringMapStringListString.write(value.keys, buf)
    }
}

public object FfiConverterTypeMegolmV1BackupKey : FfiConverterRustBuffer<MegolmV1BackupKey> {
    override fun read(buf: ByteBuffer): MegolmV1BackupKey {
        return MegolmV1BackupKey(
            FfiConverterString.read(buf),
            FfiConverterMapStringMapStringString.read(buf),
            FfiConverterOptionalTypePassphraseInfo.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: MegolmV1BackupKey) = (
        FfiConverterString.allocationSize(value.publicKey) +
            FfiConverterMapStringMapStringString.allocationSize(value.signatures) +
            FfiConverterOptionalTypePassphraseInfo.allocationSize(value.passphraseInfo) +
            FfiConverterString.allocationSize(value.backupAlgorithm)
        )

    override fun write(value: MegolmV1BackupKey, buf: ByteBuffer) {
        FfiConverterString.write(value.publicKey, buf)
        FfiConverterMapStringMapStringString.write(value.signatures, buf)
        FfiConverterOptionalTypePassphraseInfo.write(value.passphraseInfo, buf)
        FfiConverterString.write(value.backupAlgorithm, buf)
    }
}

public object FfiConverterTypeMigrationData : FfiConverterRustBuffer<MigrationData> {
    override fun read(buf: ByteBuffer): MigrationData {
        return MigrationData(
            FfiConverterTypePickledAccount.read(buf),
            FfiConverterSequenceTypePickledSession.read(buf),
            FfiConverterSequenceTypePickledInboundGroupSession.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeCrossSigningKeyExport.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: MigrationData) = (
        FfiConverterTypePickledAccount.allocationSize(value.account) +
            FfiConverterSequenceTypePickledSession.allocationSize(value.sessions) +
            FfiConverterSequenceTypePickledInboundGroupSession.allocationSize(value.inboundGroupSessions) +
            FfiConverterOptionalString.allocationSize(value.backupVersion) +
            FfiConverterOptionalString.allocationSize(value.backupRecoveryKey) +
            FfiConverterString.allocationSize(value.pickleKey) +
            FfiConverterTypeCrossSigningKeyExport.allocationSize(value.crossSigning) +
            FfiConverterSequenceString.allocationSize(value.trackedUsers)
        )

    override fun write(value: MigrationData, buf: ByteBuffer) {
        FfiConverterTypePickledAccount.write(value.account, buf)
        FfiConverterSequenceTypePickledSession.write(value.sessions, buf)
        FfiConverterSequenceTypePickledInboundGroupSession.write(value.inboundGroupSessions, buf)
        FfiConverterOptionalString.write(value.backupVersion, buf)
        FfiConverterOptionalString.write(value.backupRecoveryKey, buf)
        FfiConverterString.write(value.pickleKey, buf)
        FfiConverterTypeCrossSigningKeyExport.write(value.crossSigning, buf)
        FfiConverterSequenceString.write(value.trackedUsers, buf)
    }
}

public object FfiConverterTypePassphraseInfo : FfiConverterRustBuffer<PassphraseInfo> {
    override fun read(buf: ByteBuffer): PassphraseInfo {
        return PassphraseInfo(
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
        )
    }

    override fun allocationSize(value: PassphraseInfo) = (
        FfiConverterString.allocationSize(value.privateKeySalt) +
            FfiConverterInt.allocationSize(value.privateKeyIterations)
        )

    override fun write(value: PassphraseInfo, buf: ByteBuffer) {
        FfiConverterString.write(value.privateKeySalt, buf)
        FfiConverterInt.write(value.privateKeyIterations, buf)
    }
}

public object FfiConverterTypePickledAccount : FfiConverterRustBuffer<PickledAccount> {
    override fun read(buf: ByteBuffer): PickledAccount {
        return PickledAccount(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: PickledAccount) = (
        FfiConverterString.allocationSize(value.userId) +
            FfiConverterString.allocationSize(value.deviceId) +
            FfiConverterString.allocationSize(value.pickle) +
            FfiConverterBoolean.allocationSize(value.shared) +
            FfiConverterLong.allocationSize(value.uploadedSignedKeyCount)
        )

    override fun write(value: PickledAccount, buf: ByteBuffer) {
        FfiConverterString.write(value.userId, buf)
        FfiConverterString.write(value.deviceId, buf)
        FfiConverterString.write(value.pickle, buf)
        FfiConverterBoolean.write(value.shared, buf)
        FfiConverterLong.write(value.uploadedSignedKeyCount, buf)
    }
}

public object FfiConverterTypePickledInboundGroupSession : FfiConverterRustBuffer<PickledInboundGroupSession> {
    override fun read(buf: ByteBuffer): PickledInboundGroupSession {
        return PickledInboundGroupSession(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterMapStringString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: PickledInboundGroupSession) = (
        FfiConverterString.allocationSize(value.pickle) +
            FfiConverterString.allocationSize(value.senderKey) +
            FfiConverterMapStringString.allocationSize(value.signingKey) +
            FfiConverterString.allocationSize(value.roomId) +
            FfiConverterSequenceString.allocationSize(value.forwardingChains) +
            FfiConverterBoolean.allocationSize(value.imported) +
            FfiConverterBoolean.allocationSize(value.backedUp)
        )

    override fun write(value: PickledInboundGroupSession, buf: ByteBuffer) {
        FfiConverterString.write(value.pickle, buf)
        FfiConverterString.write(value.senderKey, buf)
        FfiConverterMapStringString.write(value.signingKey, buf)
        FfiConverterString.write(value.roomId, buf)
        FfiConverterSequenceString.write(value.forwardingChains, buf)
        FfiConverterBoolean.write(value.imported, buf)
        FfiConverterBoolean.write(value.backedUp, buf)
    }
}

public object FfiConverterTypePickledSession : FfiConverterRustBuffer<PickledSession> {
    override fun read(buf: ByteBuffer): PickledSession {
        return PickledSession(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PickledSession) = (
        FfiConverterString.allocationSize(value.pickle) +
            FfiConverterString.allocationSize(value.senderKey) +
            FfiConverterBoolean.allocationSize(value.createdUsingFallbackKey) +
            FfiConverterString.allocationSize(value.creationTime) +
            FfiConverterString.allocationSize(value.lastUseTime)
        )

    override fun write(value: PickledSession, buf: ByteBuffer) {
        FfiConverterString.write(value.pickle, buf)
        FfiConverterString.write(value.senderKey, buf)
        FfiConverterBoolean.write(value.createdUsingFallbackKey, buf)
        FfiConverterString.write(value.creationTime, buf)
        FfiConverterString.write(value.lastUseTime, buf)
    }
}

public object FfiConverterTypeQrCode : FfiConverterRustBuffer<QrCode> {
    override fun read(buf: ByteBuffer): QrCode {
        return QrCode(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalTypeCancelInfo.read(buf),
        )
    }

    override fun allocationSize(value: QrCode) = (
        FfiConverterString.allocationSize(value.otherUserId) +
            FfiConverterString.allocationSize(value.otherDeviceId) +
            FfiConverterString.allocationSize(value.flowId) +
            FfiConverterOptionalString.allocationSize(value.roomId) +
            FfiConverterBoolean.allocationSize(value.weStarted) +
            FfiConverterBoolean.allocationSize(value.otherSideScanned) +
            FfiConverterBoolean.allocationSize(value.hasBeenConfirmed) +
            FfiConverterBoolean.allocationSize(value.reciprocated) +
            FfiConverterBoolean.allocationSize(value.isDone) +
            FfiConverterBoolean.allocationSize(value.isCancelled) +
            FfiConverterOptionalTypeCancelInfo.allocationSize(value.cancelInfo)
        )

    override fun write(value: QrCode, buf: ByteBuffer) {
        FfiConverterString.write(value.otherUserId, buf)
        FfiConverterString.write(value.otherDeviceId, buf)
        FfiConverterString.write(value.flowId, buf)
        FfiConverterOptionalString.write(value.roomId, buf)
        FfiConverterBoolean.write(value.weStarted, buf)
        FfiConverterBoolean.write(value.otherSideScanned, buf)
        FfiConverterBoolean.write(value.hasBeenConfirmed, buf)
        FfiConverterBoolean.write(value.reciprocated, buf)
        FfiConverterBoolean.write(value.isDone, buf)
        FfiConverterBoolean.write(value.isCancelled, buf)
        FfiConverterOptionalTypeCancelInfo.write(value.cancelInfo, buf)
    }
}

public object FfiConverterTypeRequestVerificationResult : FfiConverterRustBuffer<RequestVerificationResult> {
    override fun read(buf: ByteBuffer): RequestVerificationResult {
        return RequestVerificationResult(
            FfiConverterTypeVerificationRequest.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: RequestVerificationResult) = (
        FfiConverterTypeVerificationRequest.allocationSize(value.verification) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.request)
        )

    override fun write(value: RequestVerificationResult, buf: ByteBuffer) {
        FfiConverterTypeVerificationRequest.write(value.verification, buf)
        FfiConverterTypeOutgoingVerificationRequest.write(value.request, buf)
    }
}

public object FfiConverterTypeRoomKeyCounts : FfiConverterRustBuffer<RoomKeyCounts> {
    override fun read(buf: ByteBuffer): RoomKeyCounts {
        return RoomKeyCounts(
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: RoomKeyCounts) = (
        FfiConverterLong.allocationSize(value.total) +
            FfiConverterLong.allocationSize(value.backedUp)
        )

    override fun write(value: RoomKeyCounts, buf: ByteBuffer) {
        FfiConverterLong.write(value.total, buf)
        FfiConverterLong.write(value.backedUp, buf)
    }
}

public object FfiConverterTypeSas : FfiConverterRustBuffer<Sas> {
    override fun read(buf: ByteBuffer): Sas {
        return Sas(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalTypeCancelInfo.read(buf),
        )
    }

    override fun allocationSize(value: Sas) = (
        FfiConverterString.allocationSize(value.otherUserId) +
            FfiConverterString.allocationSize(value.otherDeviceId) +
            FfiConverterString.allocationSize(value.flowId) +
            FfiConverterOptionalString.allocationSize(value.roomId) +
            FfiConverterBoolean.allocationSize(value.weStarted) +
            FfiConverterBoolean.allocationSize(value.hasBeenAccepted) +
            FfiConverterBoolean.allocationSize(value.canBePresented) +
            FfiConverterBoolean.allocationSize(value.supportsEmoji) +
            FfiConverterBoolean.allocationSize(value.haveWeConfirmed) +
            FfiConverterBoolean.allocationSize(value.isDone) +
            FfiConverterBoolean.allocationSize(value.isCancelled) +
            FfiConverterOptionalTypeCancelInfo.allocationSize(value.cancelInfo)
        )

    override fun write(value: Sas, buf: ByteBuffer) {
        FfiConverterString.write(value.otherUserId, buf)
        FfiConverterString.write(value.otherDeviceId, buf)
        FfiConverterString.write(value.flowId, buf)
        FfiConverterOptionalString.write(value.roomId, buf)
        FfiConverterBoolean.write(value.weStarted, buf)
        FfiConverterBoolean.write(value.hasBeenAccepted, buf)
        FfiConverterBoolean.write(value.canBePresented, buf)
        FfiConverterBoolean.write(value.supportsEmoji, buf)
        FfiConverterBoolean.write(value.haveWeConfirmed, buf)
        FfiConverterBoolean.write(value.isDone, buf)
        FfiConverterBoolean.write(value.isCancelled, buf)
        FfiConverterOptionalTypeCancelInfo.write(value.cancelInfo, buf)
    }
}

public object FfiConverterTypeScanResult : FfiConverterRustBuffer<ScanResult> {
    override fun read(buf: ByteBuffer): ScanResult {
        return ScanResult(
            FfiConverterTypeQrCode.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: ScanResult) = (
        FfiConverterTypeQrCode.allocationSize(value.qr) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.request)
        )

    override fun write(value: ScanResult, buf: ByteBuffer) {
        FfiConverterTypeQrCode.write(value.qr, buf)
        FfiConverterTypeOutgoingVerificationRequest.write(value.request, buf)
    }
}

public object FfiConverterTypeSignatureUploadRequest : FfiConverterRustBuffer<SignatureUploadRequest> {
    override fun read(buf: ByteBuffer): SignatureUploadRequest {
        return SignatureUploadRequest(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: SignatureUploadRequest) = (
        FfiConverterString.allocationSize(value.body)
        )

    override fun write(value: SignatureUploadRequest, buf: ByteBuffer) {
        FfiConverterString.write(value.body, buf)
    }
}

public object FfiConverterTypeStartSasResult : FfiConverterRustBuffer<StartSasResult> {
    override fun read(buf: ByteBuffer): StartSasResult {
        return StartSasResult(
            FfiConverterTypeSas.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: StartSasResult) = (
        FfiConverterTypeSas.allocationSize(value.sas) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.request)
        )

    override fun write(value: StartSasResult, buf: ByteBuffer) {
        FfiConverterTypeSas.write(value.sas, buf)
        FfiConverterTypeOutgoingVerificationRequest.write(value.request, buf)
    }
}

public object FfiConverterTypeUploadSigningKeysRequest : FfiConverterRustBuffer<UploadSigningKeysRequest> {
    override fun read(buf: ByteBuffer): UploadSigningKeysRequest {
        return UploadSigningKeysRequest(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: UploadSigningKeysRequest) = (
        FfiConverterString.allocationSize(value.masterKey) +
            FfiConverterString.allocationSize(value.selfSigningKey) +
            FfiConverterString.allocationSize(value.userSigningKey)
        )

    override fun write(value: UploadSigningKeysRequest, buf: ByteBuffer) {
        FfiConverterString.write(value.masterKey, buf)
        FfiConverterString.write(value.selfSigningKey, buf)
        FfiConverterString.write(value.userSigningKey, buf)
    }
}

public object FfiConverterTypeVerificationRequest : FfiConverterRustBuffer<VerificationRequest> {
    override fun read(buf: ByteBuffer): VerificationRequest {
        return VerificationRequest(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalTypeCancelInfo.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
            FfiConverterOptionalSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: VerificationRequest) = (
        FfiConverterString.allocationSize(value.otherUserId) +
            FfiConverterOptionalString.allocationSize(value.otherDeviceId) +
            FfiConverterString.allocationSize(value.flowId) +
            FfiConverterOptionalString.allocationSize(value.roomId) +
            FfiConverterBoolean.allocationSize(value.weStarted) +
            FfiConverterBoolean.allocationSize(value.isReady) +
            FfiConverterBoolean.allocationSize(value.isPassive) +
            FfiConverterBoolean.allocationSize(value.isDone) +
            FfiConverterBoolean.allocationSize(value.isCancelled) +
            FfiConverterOptionalTypeCancelInfo.allocationSize(value.cancelInfo) +
            FfiConverterOptionalSequenceString.allocationSize(value.theirMethods) +
            FfiConverterOptionalSequenceString.allocationSize(value.ourMethods)
        )

    override fun write(value: VerificationRequest, buf: ByteBuffer) {
        FfiConverterString.write(value.otherUserId, buf)
        FfiConverterOptionalString.write(value.otherDeviceId, buf)
        FfiConverterString.write(value.flowId, buf)
        FfiConverterOptionalString.write(value.roomId, buf)
        FfiConverterBoolean.write(value.weStarted, buf)
        FfiConverterBoolean.write(value.isReady, buf)
        FfiConverterBoolean.write(value.isPassive, buf)
        FfiConverterBoolean.write(value.isDone, buf)
        FfiConverterBoolean.write(value.isCancelled, buf)
        FfiConverterOptionalTypeCancelInfo.write(value.cancelInfo, buf)
        FfiConverterOptionalSequenceString.write(value.theirMethods, buf)
        FfiConverterOptionalSequenceString.write(value.ourMethods, buf)
    }
}

public object FfiConverterTypeOutgoingVerificationRequest : FfiConverterRustBuffer<OutgoingVerificationRequest> {
    override fun read(buf: ByteBuffer): OutgoingVerificationRequest {
        return when (buf.getInt()) {
            1 -> OutgoingVerificationRequest.ToDevice(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            2 -> OutgoingVerificationRequest.InRoom(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: OutgoingVerificationRequest) = when (value) {
        is OutgoingVerificationRequest.ToDevice -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterString.allocationSize(value.eventType) +
                    FfiConverterString.allocationSize(value.body)
                )
        }
        is OutgoingVerificationRequest.InRoom -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterString.allocationSize(value.roomId) +
                    FfiConverterString.allocationSize(value.eventType) +
                    FfiConverterString.allocationSize(value.content)
                )
        }
    }

    override fun write(value: OutgoingVerificationRequest, buf: ByteBuffer) {
        when (value) {
            is OutgoingVerificationRequest.ToDevice -> {
                buf.putInt(1)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterString.write(value.eventType, buf)
                FfiConverterString.write(value.body, buf)
                Unit
            }
            is OutgoingVerificationRequest.InRoom -> {
                buf.putInt(2)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterString.write(value.roomId, buf)
                FfiConverterString.write(value.eventType, buf)
                FfiConverterString.write(value.content, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

public object FfiConverterTypeRequest : FfiConverterRustBuffer<Request> {
    override fun read(buf: ByteBuffer): Request {
        return when (buf.getInt()) {
            1 -> Request.ToDevice(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            2 -> Request.KeysUpload(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            3 -> Request.KeysQuery(
                FfiConverterString.read(buf),
                FfiConverterSequenceString.read(buf),
            )
            4 -> Request.KeysClaim(
                FfiConverterString.read(buf),
                FfiConverterMapStringMapStringString.read(buf),
            )
            5 -> Request.KeysBackup(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            6 -> Request.RoomMessage(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            7 -> Request.SignatureUpload(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Request) = when (value) {
        is Request.ToDevice -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterString.allocationSize(value.eventType) +
                    FfiConverterString.allocationSize(value.body)
                )
        }
        is Request.KeysUpload -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterString.allocationSize(value.body)
                )
        }
        is Request.KeysQuery -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterSequenceString.allocationSize(value.users)
                )
        }
        is Request.KeysClaim -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterMapStringMapStringString.allocationSize(value.oneTimeKeys)
                )
        }
        is Request.KeysBackup -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterString.allocationSize(value.version) +
                    FfiConverterString.allocationSize(value.rooms)
                )
        }
        is Request.RoomMessage -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterString.allocationSize(value.roomId) +
                    FfiConverterString.allocationSize(value.eventType) +
                    FfiConverterString.allocationSize(value.content)
                )
        }
        is Request.SignatureUpload -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.requestId) +
                    FfiConverterString.allocationSize(value.body)
                )
        }
    }

    override fun write(value: Request, buf: ByteBuffer) {
        when (value) {
            is Request.ToDevice -> {
                buf.putInt(1)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterString.write(value.eventType, buf)
                FfiConverterString.write(value.body, buf)
                Unit
            }
            is Request.KeysUpload -> {
                buf.putInt(2)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterString.write(value.body, buf)
                Unit
            }
            is Request.KeysQuery -> {
                buf.putInt(3)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterSequenceString.write(value.users, buf)
                Unit
            }
            is Request.KeysClaim -> {
                buf.putInt(4)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterMapStringMapStringString.write(value.oneTimeKeys, buf)
                Unit
            }
            is Request.KeysBackup -> {
                buf.putInt(5)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterString.write(value.version, buf)
                FfiConverterString.write(value.rooms, buf)
                Unit
            }
            is Request.RoomMessage -> {
                buf.putInt(6)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterString.write(value.roomId, buf)
                FfiConverterString.write(value.eventType, buf)
                FfiConverterString.write(value.content, buf)
                Unit
            }
            is Request.SignatureUpload -> {
                buf.putInt(7)
                FfiConverterString.write(value.requestId, buf)
                FfiConverterString.write(value.body, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

public object FfiConverterTypeRequestType : FfiConverterRustBuffer<RequestType> {
    override fun read(buf: ByteBuffer) = try {
        RequestType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: RequestType) = 4

    override fun write(value: RequestType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}

public object FfiConverterTypeUserIdentity : FfiConverterRustBuffer<UserIdentity> {
    override fun read(buf: ByteBuffer): UserIdentity {
        return when (buf.getInt()) {
            1 -> UserIdentity.Own(
                FfiConverterString.read(buf),
                FfiConverterBoolean.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            2 -> UserIdentity.Other(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: UserIdentity) = when (value) {
        is UserIdentity.Own -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.userId) +
                    FfiConverterBoolean.allocationSize(value.trustsOurOwnDevice) +
                    FfiConverterString.allocationSize(value.masterKey) +
                    FfiConverterString.allocationSize(value.selfSigningKey) +
                    FfiConverterString.allocationSize(value.userSigningKey)
                )
        }
        is UserIdentity.Other -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.userId) +
                    FfiConverterString.allocationSize(value.masterKey) +
                    FfiConverterString.allocationSize(value.selfSigningKey)
                )
        }
    }

    override fun write(value: UserIdentity, buf: ByteBuffer) {
        when (value) {
            is UserIdentity.Own -> {
                buf.putInt(1)
                FfiConverterString.write(value.userId, buf)
                FfiConverterBoolean.write(value.trustsOurOwnDevice, buf)
                FfiConverterString.write(value.masterKey, buf)
                FfiConverterString.write(value.selfSigningKey, buf)
                FfiConverterString.write(value.userSigningKey, buf)
                Unit
            }
            is UserIdentity.Other -> {
                buf.putInt(2)
                FfiConverterString.write(value.userId, buf)
                FfiConverterString.write(value.masterKey, buf)
                FfiConverterString.write(value.selfSigningKey, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

public object FfiConverterTypeVerification : FfiConverterRustBuffer<Verification> {
    override fun read(buf: ByteBuffer): Verification {
        return when (buf.getInt()) {
            1 -> Verification.SasV1(
                FfiConverterTypeSas.read(buf),
            )
            2 -> Verification.QrCodeV1(
                FfiConverterTypeQrCode.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Verification) = when (value) {
        is Verification.SasV1 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterTypeSas.allocationSize(value.sas)
                )
        }
        is Verification.QrCodeV1 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterTypeQrCode.allocationSize(value.qrcode)
                )
        }
    }

    override fun write(value: Verification, buf: ByteBuffer) {
        when (value) {
            is Verification.SasV1 -> {
                buf.putInt(1)
                FfiConverterTypeSas.write(value.sas, buf)
                Unit
            }
            is Verification.QrCodeV1 -> {
                buf.putInt(2)
                FfiConverterTypeQrCode.write(value.qrcode, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class CryptoStoreException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class CryptoStore(message: String) : CryptoStoreException(message)
    class OlmException(message: String) : CryptoStoreException(message)
    class Serialization(message: String) : CryptoStoreException(message)
    class Identifier(message: String) : CryptoStoreException(message)
    class InvalidUserId(message: String) : CryptoStoreException(message)

    companion object ErrorHandler : CallStatusErrorHandler<CryptoStoreException> {
        override fun lift(error_buf: RustBuffer.ByValue): CryptoStoreException = FfiConverterTypeCryptoStoreError.lift(error_buf)
    }
}

public object FfiConverterTypeCryptoStoreError : FfiConverterRustBuffer<CryptoStoreException> {
    override fun read(buf: ByteBuffer): CryptoStoreException {

        return when (buf.getInt()) {
            1 -> CryptoStoreException.CryptoStore(FfiConverterString.read(buf))
            2 -> CryptoStoreException.OlmException(FfiConverterString.read(buf))
            3 -> CryptoStoreException.Serialization(FfiConverterString.read(buf))
            4 -> CryptoStoreException.Identifier(FfiConverterString.read(buf))
            5 -> CryptoStoreException.InvalidUserId(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: CryptoStoreException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: CryptoStoreException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

sealed class DecodeException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class Decode(message: String) : DecodeException(message)
    class CryptoStore(message: String) : DecodeException(message)

    companion object ErrorHandler : CallStatusErrorHandler<DecodeException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecodeException = FfiConverterTypeDecodeError.lift(error_buf)
    }
}

public object FfiConverterTypeDecodeError : FfiConverterRustBuffer<DecodeException> {
    override fun read(buf: ByteBuffer): DecodeException {

        return when (buf.getInt()) {
            1 -> DecodeException.Decode(FfiConverterString.read(buf))
            2 -> DecodeException.CryptoStore(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: DecodeException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: DecodeException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

sealed class DecryptionException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class Identifier(message: String) : DecryptionException(message)
    class Serialization(message: String) : DecryptionException(message)
    class Megolm(message: String) : DecryptionException(message)

    companion object ErrorHandler : CallStatusErrorHandler<DecryptionException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecryptionException = FfiConverterTypeDecryptionError.lift(error_buf)
    }
}

public object FfiConverterTypeDecryptionError : FfiConverterRustBuffer<DecryptionException> {
    override fun read(buf: ByteBuffer): DecryptionException {

        return when (buf.getInt()) {
            1 -> DecryptionException.Identifier(FfiConverterString.read(buf))
            2 -> DecryptionException.Serialization(FfiConverterString.read(buf))
            3 -> DecryptionException.Megolm(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: DecryptionException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: DecryptionException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

sealed class KeyImportException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class Export(message: String) : KeyImportException(message)
    class CryptoStore(message: String) : KeyImportException(message)
    class Json(message: String) : KeyImportException(message)

    companion object ErrorHandler : CallStatusErrorHandler<KeyImportException> {
        override fun lift(error_buf: RustBuffer.ByValue): KeyImportException = FfiConverterTypeKeyImportError.lift(error_buf)
    }
}

public object FfiConverterTypeKeyImportError : FfiConverterRustBuffer<KeyImportException> {
    override fun read(buf: ByteBuffer): KeyImportException {

        return when (buf.getInt()) {
            1 -> KeyImportException.Export(FfiConverterString.read(buf))
            2 -> KeyImportException.CryptoStore(FfiConverterString.read(buf))
            3 -> KeyImportException.Json(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: KeyImportException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: KeyImportException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

sealed class MigrationException : Exception() {
    // Each variant is a nested class

    class Generic(
        val errorMessage: String
    ) : MigrationException()

    companion object ErrorHandler : CallStatusErrorHandler<MigrationException> {
        override fun lift(error_buf: RustBuffer.ByValue): MigrationException = FfiConverterTypeMigrationError.lift(error_buf)
    }
}

public object FfiConverterTypeMigrationError : FfiConverterRustBuffer<MigrationException> {
    override fun read(buf: ByteBuffer): MigrationException {

        return when (buf.getInt()) {
            1 -> MigrationException.Generic(
                FfiConverterString.read(buf),
            )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: MigrationException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: MigrationException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

sealed class PkDecryptionException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class Olm(message: String) : PkDecryptionException(message)

    companion object ErrorHandler : CallStatusErrorHandler<PkDecryptionException> {
        override fun lift(error_buf: RustBuffer.ByValue): PkDecryptionException = FfiConverterTypePkDecryptionError.lift(error_buf)
    }
}

public object FfiConverterTypePkDecryptionError : FfiConverterRustBuffer<PkDecryptionException> {
    override fun read(buf: ByteBuffer): PkDecryptionException {

        return when (buf.getInt()) {
            1 -> PkDecryptionException.Olm(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: PkDecryptionException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: PkDecryptionException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

sealed class SecretImportException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class Import(message: String) : SecretImportException(message)
    class CryptoStore(message: String) : SecretImportException(message)

    companion object ErrorHandler : CallStatusErrorHandler<SecretImportException> {
        override fun lift(error_buf: RustBuffer.ByValue): SecretImportException = FfiConverterTypeSecretImportError.lift(error_buf)
    }
}

public object FfiConverterTypeSecretImportError : FfiConverterRustBuffer<SecretImportException> {
    override fun read(buf: ByteBuffer): SecretImportException {

        return when (buf.getInt()) {
            1 -> SecretImportException.Import(FfiConverterString.read(buf))
            2 -> SecretImportException.CryptoStore(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: SecretImportException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: SecretImportException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

sealed class SignatureException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class Signature(message: String) : SignatureException(message)
    class Identifier(message: String) : SignatureException(message)
    class CryptoStore(message: String) : SignatureException(message)
    class UnknownDevice(message: String) : SignatureException(message)
    class UnknownUserIdentity(message: String) : SignatureException(message)

    companion object ErrorHandler : CallStatusErrorHandler<SignatureException> {
        override fun lift(error_buf: RustBuffer.ByValue): SignatureException = FfiConverterTypeSignatureError.lift(error_buf)
    }
}

public object FfiConverterTypeSignatureError : FfiConverterRustBuffer<SignatureException> {
    override fun read(buf: ByteBuffer): SignatureException {

        return when (buf.getInt()) {
            1 -> SignatureException.Signature(FfiConverterString.read(buf))
            2 -> SignatureException.Identifier(FfiConverterString.read(buf))
            3 -> SignatureException.CryptoStore(FfiConverterString.read(buf))
            4 -> SignatureException.UnknownDevice(FfiConverterString.read(buf))
            5 -> SignatureException.UnknownUserIdentity(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    @Suppress("UNUSED_PARAMETER")
    override fun allocationSize(value: SignatureException): Int {
        throw RuntimeException("Writing Errors is not supported")
    }

    @Suppress("UNUSED_PARAMETER")
    override fun write(value: SignatureException, buf: ByteBuffer) {
        throw RuntimeException("Writing Errors is not supported")
    }
}

internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj]
                ?: currentHandle.getAndAdd(stride)
                .also { handle ->
                    leftMap[handle] = obj
                    rightMap[obj] = handle
                }
        }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
) : FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for Logger Callback Interface

public interface Logger {
    fun log(logLine: String)
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeLogger : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeLogger.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeLogger.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                val buffer = this.invokeLog(cb, args)
                outBuf.setValue(buffer)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                1
            }

            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalException.
            // https://github.com/mozilla/uniffi-rs/issues/351
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                -1
            }
        }
    }

    private fun invokeLog(kotlinCallbackInterface: Logger, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.log(
                FfiConverterString.read(buf)
            )
                .let { RustBuffer.ByValue() }
            // TODO catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeLogger : FfiConverterCallbackInterface<Logger>(
    foreignCallback = ForeignCallbackTypeLogger()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_olm_eb49_Logger_init_callback(this.foreignCallback, status)
        }
    }
}

// Declaration and FfiConverters for ProgressListener Callback Interface

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeProgressListener : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeProgressListener.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeProgressListener.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                val buffer = this.invokeOnProgress(cb, args)
                outBuf.setValue(buffer)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                1
            }

            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalException.
            // https://github.com/mozilla/uniffi-rs/issues/351
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                -1
            }
        }
    }

    private fun invokeOnProgress(kotlinCallbackInterface: ProgressListener, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.onProgress(
                FfiConverterInt.read(buf), FfiConverterInt.read(buf)
            )
                .let { RustBuffer.ByValue() }
            // TODO catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeProgressListener : FfiConverterCallbackInterface<ProgressListener>(
    foreignCallback = ForeignCallbackTypeProgressListener()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_olm_eb49_ProgressListener_init_callback(this.foreignCallback, status)
        }
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeBackupKeys : FfiConverterRustBuffer<BackupKeys?> {
    override fun read(buf: ByteBuffer): BackupKeys? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeBackupKeys.read(buf)
    }

    override fun allocationSize(value: BackupKeys?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeBackupKeys.allocationSize(value)
        }
    }

    override fun write(value: BackupKeys?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeBackupKeys.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeCancelInfo : FfiConverterRustBuffer<CancelInfo?> {
    override fun read(buf: ByteBuffer): CancelInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCancelInfo.read(buf)
    }

    override fun allocationSize(value: CancelInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCancelInfo.allocationSize(value)
        }
    }

    override fun write(value: CancelInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCancelInfo.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeConfirmVerificationResult : FfiConverterRustBuffer<ConfirmVerificationResult?> {
    override fun read(buf: ByteBuffer): ConfirmVerificationResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeConfirmVerificationResult.read(buf)
    }

    override fun allocationSize(value: ConfirmVerificationResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeConfirmVerificationResult.allocationSize(value)
        }
    }

    override fun write(value: ConfirmVerificationResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeConfirmVerificationResult.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeCrossSigningKeyExport : FfiConverterRustBuffer<CrossSigningKeyExport?> {
    override fun read(buf: ByteBuffer): CrossSigningKeyExport? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCrossSigningKeyExport.read(buf)
    }

    override fun allocationSize(value: CrossSigningKeyExport?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCrossSigningKeyExport.allocationSize(value)
        }
    }

    override fun write(value: CrossSigningKeyExport?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCrossSigningKeyExport.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeDevice : FfiConverterRustBuffer<Device?> {
    override fun read(buf: ByteBuffer): Device? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDevice.read(buf)
    }

    override fun allocationSize(value: Device?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeDevice.allocationSize(value)
        }
    }

    override fun write(value: Device?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDevice.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypePassphraseInfo : FfiConverterRustBuffer<PassphraseInfo?> {
    override fun read(buf: ByteBuffer): PassphraseInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePassphraseInfo.read(buf)
    }

    override fun allocationSize(value: PassphraseInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypePassphraseInfo.allocationSize(value)
        }
    }

    override fun write(value: PassphraseInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePassphraseInfo.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeQrCode : FfiConverterRustBuffer<QrCode?> {
    override fun read(buf: ByteBuffer): QrCode? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeQrCode.read(buf)
    }

    override fun allocationSize(value: QrCode?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeQrCode.allocationSize(value)
        }
    }

    override fun write(value: QrCode?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeQrCode.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeRequestVerificationResult : FfiConverterRustBuffer<RequestVerificationResult?> {
    override fun read(buf: ByteBuffer): RequestVerificationResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRequestVerificationResult.read(buf)
    }

    override fun allocationSize(value: RequestVerificationResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRequestVerificationResult.allocationSize(value)
        }
    }

    override fun write(value: RequestVerificationResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRequestVerificationResult.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeScanResult : FfiConverterRustBuffer<ScanResult?> {
    override fun read(buf: ByteBuffer): ScanResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeScanResult.read(buf)
    }

    override fun allocationSize(value: ScanResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeScanResult.allocationSize(value)
        }
    }

    override fun write(value: ScanResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeScanResult.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeSignatureUploadRequest : FfiConverterRustBuffer<SignatureUploadRequest?> {
    override fun read(buf: ByteBuffer): SignatureUploadRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSignatureUploadRequest.read(buf)
    }

    override fun allocationSize(value: SignatureUploadRequest?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSignatureUploadRequest.allocationSize(value)
        }
    }

    override fun write(value: SignatureUploadRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSignatureUploadRequest.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeStartSasResult : FfiConverterRustBuffer<StartSasResult?> {
    override fun read(buf: ByteBuffer): StartSasResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeStartSasResult.read(buf)
    }

    override fun allocationSize(value: StartSasResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeStartSasResult.allocationSize(value)
        }
    }

    override fun write(value: StartSasResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeStartSasResult.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeVerificationRequest : FfiConverterRustBuffer<VerificationRequest?> {
    override fun read(buf: ByteBuffer): VerificationRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeVerificationRequest.read(buf)
    }

    override fun allocationSize(value: VerificationRequest?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeVerificationRequest.allocationSize(value)
        }
    }

    override fun write(value: VerificationRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeVerificationRequest.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeOutgoingVerificationRequest : FfiConverterRustBuffer<OutgoingVerificationRequest?> {
    override fun read(buf: ByteBuffer): OutgoingVerificationRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeOutgoingVerificationRequest.read(buf)
    }

    override fun allocationSize(value: OutgoingVerificationRequest?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeOutgoingVerificationRequest.allocationSize(value)
        }
    }

    override fun write(value: OutgoingVerificationRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeOutgoingVerificationRequest.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeRequest : FfiConverterRustBuffer<Request?> {
    override fun read(buf: ByteBuffer): Request? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRequest.read(buf)
    }

    override fun allocationSize(value: Request?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRequest.allocationSize(value)
        }
    }

    override fun write(value: Request?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRequest.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeUserIdentity : FfiConverterRustBuffer<UserIdentity?> {
    override fun read(buf: ByteBuffer): UserIdentity? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUserIdentity.read(buf)
    }

    override fun allocationSize(value: UserIdentity?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeUserIdentity.allocationSize(value)
        }
    }

    override fun write(value: UserIdentity?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUserIdentity.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeVerification : FfiConverterRustBuffer<Verification?> {
    override fun read(buf: ByteBuffer): Verification? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeVerification.read(buf)
    }

    override fun allocationSize(value: Verification?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeVerification.allocationSize(value)
        }
    }

    override fun write(value: Verification?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeVerification.write(value, buf)
        }
    }
}

public object FfiConverterOptionalSequenceInt : FfiConverterRustBuffer<List<Int>?> {
    override fun read(buf: ByteBuffer): List<Int>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceInt.read(buf)
    }

    override fun allocationSize(value: List<Int>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceInt.allocationSize(value)
        }
    }

    override fun write(value: List<Int>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceInt.write(value, buf)
        }
    }
}

public object FfiConverterOptionalSequenceString : FfiConverterRustBuffer<List<String>?> {
    override fun read(buf: ByteBuffer): List<String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<String>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}

public object FfiConverterSequenceInt : FfiConverterRustBuffer<List<Int>> {
    override fun read(buf: ByteBuffer): List<Int> {
        val len = buf.getInt()
        return List<Int>(len) {
            FfiConverterInt.read(buf)
        }
    }

    override fun allocationSize(value: List<Int>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterInt.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Int>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterInt.write(it, buf)
        }
    }
}

public object FfiConverterSequenceString : FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeDevice : FfiConverterRustBuffer<List<Device>> {
    override fun read(buf: ByteBuffer): List<Device> {
        val len = buf.getInt()
        return List<Device>(len) {
            FfiConverterTypeDevice.read(buf)
        }
    }

    override fun allocationSize(value: List<Device>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeDevice.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Device>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeDevice.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypePickledInboundGroupSession : FfiConverterRustBuffer<List<PickledInboundGroupSession>> {
    override fun read(buf: ByteBuffer): List<PickledInboundGroupSession> {
        val len = buf.getInt()
        return List<PickledInboundGroupSession>(len) {
            FfiConverterTypePickledInboundGroupSession.read(buf)
        }
    }

    override fun allocationSize(value: List<PickledInboundGroupSession>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypePickledInboundGroupSession.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PickledInboundGroupSession>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypePickledInboundGroupSession.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypePickledSession : FfiConverterRustBuffer<List<PickledSession>> {
    override fun read(buf: ByteBuffer): List<PickledSession> {
        val len = buf.getInt()
        return List<PickledSession>(len) {
            FfiConverterTypePickledSession.read(buf)
        }
    }

    override fun allocationSize(value: List<PickledSession>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypePickledSession.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PickledSession>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypePickledSession.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeVerificationRequest : FfiConverterRustBuffer<List<VerificationRequest>> {
    override fun read(buf: ByteBuffer): List<VerificationRequest> {
        val len = buf.getInt()
        return List<VerificationRequest>(len) {
            FfiConverterTypeVerificationRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<VerificationRequest>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeVerificationRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<VerificationRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeVerificationRequest.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeOutgoingVerificationRequest : FfiConverterRustBuffer<List<OutgoingVerificationRequest>> {
    override fun read(buf: ByteBuffer): List<OutgoingVerificationRequest> {
        val len = buf.getInt()
        return List<OutgoingVerificationRequest>(len) {
            FfiConverterTypeOutgoingVerificationRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<OutgoingVerificationRequest>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeOutgoingVerificationRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<OutgoingVerificationRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeOutgoingVerificationRequest.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeRequest : FfiConverterRustBuffer<List<Request>> {
    override fun read(buf: ByteBuffer): List<Request> {
        val len = buf.getInt()
        return List<Request>(len) {
            FfiConverterTypeRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<Request>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Request>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeRequest.write(it, buf)
        }
    }
}

public object FfiConverterMapStringInt : FfiConverterRustBuffer<Map<String, Int>> {
    override fun read(buf: ByteBuffer): Map<String, Int> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, Int> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterInt.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, Int>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterInt.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, Int>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterInt.write(v, buf)
        }
    }
}

public object FfiConverterMapStringString : FfiConverterRustBuffer<Map<String, String>> {
    override fun read(buf: ByteBuffer): Map<String, String> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, String> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, String>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}

public object FfiConverterMapStringListString : FfiConverterRustBuffer<Map<String, List<String>>> {
    override fun read(buf: ByteBuffer): Map<String, List<String>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, List<String>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterSequenceString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, List<String>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterSequenceString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, List<String>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterSequenceString.write(v, buf)
        }
    }
}

public object FfiConverterMapStringMapStringString : FfiConverterRustBuffer<Map<String, Map<String, String>>> {
    override fun read(buf: ByteBuffer): Map<String, Map<String, String>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, Map<String, String>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterMapStringString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, Map<String, String>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterMapStringString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, Map<String, String>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterMapStringString.write(v, buf)
        }
    }
}

public object FfiConverterMapStringMapStringListString : FfiConverterRustBuffer<Map<String, Map<String, List<String>>>> {
    override fun read(buf: ByteBuffer): Map<String, Map<String, List<String>>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, Map<String, List<String>>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterMapStringListString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, Map<String, List<String>>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterMapStringListString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, Map<String, List<String>>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterMapStringListString.write(v, buf)
        }
    }
} fun setLogger(logger: Logger) =

    rustCall() { _status ->
        _UniFFILib.INSTANCE.olm_eb49_set_logger(FfiConverterTypeLogger.lower(logger), _status)
    }

@Throws(MigrationException::class)fun migrate(data: MigrationData, path: String, passphrase: String?, progressListener: ProgressListener) =

    rustCallWithError(MigrationException) { _status ->
        _UniFFILib.INSTANCE.olm_eb49_migrate(FfiConverterTypeMigrationData.lower(data), FfiConverterString.lower(path), FfiConverterOptionalString.lower(passphrase), FfiConverterTypeProgressListener.lower(progressListener), _status)
    }
